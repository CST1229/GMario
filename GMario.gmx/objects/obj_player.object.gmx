<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_pmaskbig</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The ACTUAL player object
randomize(); //Randomize
state = 0; //Powerup state
accel = 0.32; //Acceleration
jumpspeed = 6.3; //Jump Speed
grav = 0.3; //Gravity
tvelocity = 8; //Terminal Velocity (Fastest falling speed)
wspeed = 3; //Walking speed
tspeed = wspeed; //Terminal speed (Fastest horizontal speed)
rspeed = 5; //Running speed
yspeed = 0; //Vertical speed, used so that friction isn't applied on vertical speed
bumper = true; //If Mario bumps off of blocks
bumpspeed = 2; //Bumping Speed
jumpmul = 1; //Jumping multiplier, used for running
jumpminus = 2.5; //Jumping speed if Jump isn't held
facing = 1; //Facing direction
crouching = false; //Crouching variable
if place_meeting(x, y+1, obj_solid) airborne = false; else airborne = true; //Airborne variable
dir = 0; //Input direction
invinc = 0; //Invincibility Frames
alarm[1] = 2; //Frame alarm
timer10 = 0; //Red timer sprite timer
fireballeligible = false; //Is Mario able to shoot fireballs?
///Misc
depth = playerdepth; //Depth, change the macro to set depth
global.pcombo = 0; //Score combo, used for stomping
if (lives &lt; 1) {lives = 5; score = 0; global.coins = 0; room_goto(rmenu);} //Simple logic to check for game over
audio_stop_all();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>This is for the fireball animation timer.</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///I don't remember or know what this is for...
alarm[1] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>4</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
p_movementi();

//Running
p_movementrun();

//Friction
p_movementfriction();
//Set Direction
p_movesetdir();

//Set Horizontal speed
p_moveaccelerate();
//Jump and Gravity
p_movejumpandgravity();
//Jump 
p_movejump();

//Horizontal Collisions
p_collideh();

//Vertical Collisions
p_collidev();

//Clamp Speed
p_clampspeed();

//Set Y Speed
p_setyspeed();

//Move Camera
p_movecamera();

//Image Speed
p_imagespeed();

//Combo and Lives
p_combolives();

//Invincibility
invinc -= 1;
invinc = clamp(invinc,0,1234567890)

//If invincible, then display at half alpha
if (invinc &gt; 5) image_alpha = 0.5; else image_alpha = 1;

//Instadeaths
if (y &gt; room_height + 64) instadie(); //Pit death
if (global.time &lt; 1) instadie(); //Time heart attack

//Red time timer
timer10 += 1; if (timer10 &gt; 9) timer10 = 0;

//Old debug code for turnbits that I left in
//if (keyboard_check(ord("J")) and keyboard_check(ord("K")) and keyboard_check(ord("L")) and mouse_check_button_pressed(mb_left)) instance_create(mouse_x,mouse_y,obj_turnbit);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player images
//All the different sprites
if (hspeed = 0 and airborne == false /*and sprite_index != spr_player_lookup*/)                  sprite_index = spr_player;
if (sprite_index == spr_player and up)                                                          {sprite_index = spr_player_lookup; hspeed = 0;}
if (hspeed != 0 and !airborne)                                                                   sprite_index = spr_player_walk;
if (dir == 1 and hspeed &lt; 0 or dir == -1 and hspeed &gt; 0) if (abs(hspeed) &gt;= 2)                   sprite_index = spr_player_skid;
if (yspeed &lt; 0 and airborne)                                                                     sprite_index = spr_player_jump;
if (yspeed &gt;= 0 and airborne)                                                                    sprite_index = spr_player_fall;
if (sprite_index = spr_player_fall and abs(hspeed) &gt;= rspeed)                                    sprite_index = spr_player_runjump;
if (sprite_index = spr_player_jump and abs(hspeed) &gt;= rspeed)                                    sprite_index = spr_player_runjump;
if (sprite_index = spr_player_walk and abs(hspeed) &gt;= rspeed)                                    sprite_index = spr_player_run;
if (crouching)                                                                                   sprite_index = spr_player_crouch;
//Skid Sound
if (sprite_index == spr_player_skid) play_audio(snd_skid,1,false);
//Skid dust
if (sprite_index == spr_player_skid or sprite_index == spr_player_crouch and hspeed != 0 and !airborne or sprite_index == spr_player_run) instance_create(x,y+24,obj_dust);
//Fireball eligibility
if (sprite_index != spr_player_crouch and instance_number(obj_fireball) &lt; 5 and state == 2) fireballeligible = true; else fireballeligible = false;
//Powerup lookup tables
//If you want to add one, you need to create one!
if (state == 0) powerupimages_small();
if (state == 2) powerupimages_fire();
//Fireballs
if (runpressed == true and fireballeligible) //If you are eligible
//Create a fireball, change the image, play the sound and set the animation timer.
{instance_create(x,y+8,obj_fireball); sprite_index = spr_player_shoot_fire; play_audio(snd_fireball,0,false); alarm[2] = 10;}
//Then keep changing the image if the fireball animation timer is not out
if (alarm[2] &gt; 0 and state == 2) sprite_index = spr_player_shoot_fire;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_goomba">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Goomba stomping code
var i = instance_place(x,y,obj_goomba); //Set tempvar for future interactions
if (i.live = 0) exit; //No need to run code if it's dead
if (yspeed &gt; 0) /*If stomped, SMB1 style*/ {i.live = 0; yspeed = -7; instance_create(i.x,i.y-8,scorecombo()); global.pcombo += 1;} else die();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hurt">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GET HIT
die();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_death">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INSTADIE
instadie();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug lives 4
//lives += 2000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug lives 2
//lives += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug lives
//lives += 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI
draw_set_font(global.goldfont); //Coin Font
draw_sprite(spr_coinhud,0,8,8); //Coin sprite
draw_text(25,8,clamp(global.coins,0,99)); //Coin text
draw_set_font(global.hudfont);//Other text
draw_text(8,24,score); //Score
draw_sprite(spr_livehud,0,view_wview[0]-44,8); //1UP sprite
draw_text(view_wview[0]-20,8,lives); //Lives
if (global.time &gt; 50) draw_sprite(spr_timehud,0,view_wview[0]-102,8); //Time sprite
else draw_sprite(spr_redtimehud,timer10,view_wview[0]-102,8); //Red time sprite
draw_text(view_wview[0]-84,8, clamp(global.time,0,999)); //Time text
if (global.showfps == 1) draw_text(8,view_hview[0]-16,fps) //Capped FPS display
else if (global.showfps == 2) draw_text(8,view_hview[0]-16,fps_real) //Real FPS display
//Congratulory messages
if (score &gt;= 10000000) {
    draw_set_font(global.messagefont); 
    draw_text(48, 8, "Wow!!!! You are a super player!");
    }
if (score &gt;= 2147300000) {
    draw_set_font(global.messagefont); 
    draw_text(8, 40, "Congratulations!!!!! This is as high as it gets.");
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the sprite right
//Tempoary variable to set X and Y to
var xx = x;
var yy = y;
//Set X and Y appropriately
x = floor(x);
y = round2(y);
//NO LONGER NEEDED: if (sprite_index == spr_player_crouch) y += 16; //Draw the sprite away from origin if crouching
//Draw the player
draw_self();
//Set everything back
x = xx;
y = yy;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FPS counter
switch(global.showfps) {
case 0: {global.showfps = 1; break;}
case 1: {global.showfps = 2; break;}
case 2: {global.showfps = 0; break;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug score reset
//score = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>224</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_another_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>11</kind>
            <room>rmenu</room>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room restart
if (!keyboard_check(vk_alt)) room_restart(); //Prevent room from resarting if about to fullscreen
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
